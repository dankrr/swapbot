function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { OPEN_BRAKET, CLOSE_BRAKET, SLASH } from '@bbob/plugin-helper/lib/char';

// type, value, line, row,
var TOKEN_TYPE_ID = 'type'; // 0;
var TOKEN_VALUE_ID = 'value'; // 1;
var TOKEN_COLUMN_ID = 'row'; // 2;
var TOKEN_LINE_ID = 'line'; // 3;

var TOKEN_TYPE_WORD = 'word';
var TOKEN_TYPE_TAG = 'tag';
var TOKEN_TYPE_ATTR_NAME = 'attr-name';
var TOKEN_TYPE_ATTR_VALUE = 'attr-value';
var TOKEN_TYPE_SPACE = 'space';
var TOKEN_TYPE_NEW_LINE = 'new-line';

var getTokenValue = function getTokenValue(token) {
  return token[TOKEN_VALUE_ID];
};
var getTokenLine = function getTokenLine(token) {
  return token[TOKEN_LINE_ID];
};
var getTokenColumn = function getTokenColumn(token) {
  return token[TOKEN_COLUMN_ID];
};

var isTextToken = function isTextToken(token) {
  return token[TOKEN_TYPE_ID] === TOKEN_TYPE_SPACE || token[TOKEN_TYPE_ID] === TOKEN_TYPE_NEW_LINE || token[TOKEN_TYPE_ID] === TOKEN_TYPE_WORD;
};

var isTagToken = function isTagToken(token) {
  return token[TOKEN_TYPE_ID] === TOKEN_TYPE_TAG;
};
var isTagEnd = function isTagEnd(token) {
  return getTokenValue(token).charCodeAt(0) === SLASH.charCodeAt(0);
};
var isTagStart = function isTagStart(token) {
  return !isTagEnd(token);
};
var isAttrNameToken = function isAttrNameToken(token) {
  return token[TOKEN_TYPE_ID] === TOKEN_TYPE_ATTR_NAME;
};
var isAttrValueToken = function isAttrValueToken(token) {
  return token[TOKEN_TYPE_ID] === TOKEN_TYPE_ATTR_VALUE;
};

var getTagName = function getTagName(token) {
  var value = getTokenValue(token);

  return isTagEnd(token) ? value.slice(1) : value;
};

var convertTagToText = function convertTagToText(token) {
  var text = OPEN_BRAKET;

  if (isTagEnd(token)) {
    text += SLASH;
  }

  text += getTokenValue(token);
  text += CLOSE_BRAKET;

  return text;
};

var Token = function () {
  /**
   * @param {String} type
   * @param {String} value
   * @param line
   * @param row
   */
  function Token(type, value, line, row) {
    _classCallCheck(this, Token);

    this[TOKEN_TYPE_ID] = String(type);
    this[TOKEN_VALUE_ID] = String(value);
    this[TOKEN_LINE_ID] = Number(line);
    this[TOKEN_COLUMN_ID] = Number(row);
  }

  Token.prototype.isEmpty = function isEmpty() {
    return !!this[TOKEN_TYPE_ID];
  };

  Token.prototype.isText = function isText() {
    return isTextToken(this);
  };

  Token.prototype.isTag = function isTag() {
    return isTagToken(this);
  };

  Token.prototype.isAttrName = function isAttrName() {
    return isAttrNameToken(this);
  };

  Token.prototype.isAttrValue = function isAttrValue() {
    return isAttrValueToken(this);
  };

  Token.prototype.isStart = function isStart() {
    return isTagStart(this);
  };

  Token.prototype.isEnd = function isEnd() {
    return isTagEnd(this);
  };

  Token.prototype.getName = function getName() {
    return getTagName(this);
  };

  Token.prototype.getValue = function getValue() {
    return getTokenValue(this);
  };

  Token.prototype.getLine = function getLine() {
    return getTokenLine(this);
  };

  Token.prototype.getColumn = function getColumn() {
    return getTokenColumn(this);
  };

  Token.prototype.toString = function toString() {
    return convertTagToText(this);
  };

  return Token;
}();

export var TYPE_ID = TOKEN_TYPE_ID;
export var VALUE_ID = TOKEN_VALUE_ID;
export var LINE_ID = TOKEN_LINE_ID;
export var COLUMN_ID = TOKEN_COLUMN_ID;
export var TYPE_WORD = TOKEN_TYPE_WORD;
export var TYPE_TAG = TOKEN_TYPE_TAG;
export var TYPE_ATTR_NAME = TOKEN_TYPE_ATTR_NAME;
export var TYPE_ATTR_VALUE = TOKEN_TYPE_ATTR_VALUE;
export var TYPE_SPACE = TOKEN_TYPE_SPACE;
export var TYPE_NEW_LINE = TOKEN_TYPE_NEW_LINE;
export { Token };
export default Token;